// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#ifndef PROTOBUF_INCLUDED_test_2eproto
#define PROTOBUF_INCLUDED_test_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_test_2eproto 

namespace protobuf_test_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[9];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_test_2eproto
namespace ngcp {
namespace test {
class CreateRadioProfileRequest;
class CreateRadioProfileRequestDefaultTypeInternal;
extern CreateRadioProfileRequestDefaultTypeInternal _CreateRadioProfileRequest_default_instance_;
class CreateRadioProfileResponse;
class CreateRadioProfileResponseDefaultTypeInternal;
extern CreateRadioProfileResponseDefaultTypeInternal _CreateRadioProfileResponse_default_instance_;
class DeleteRadioProfileRequest;
class DeleteRadioProfileRequestDefaultTypeInternal;
extern DeleteRadioProfileRequestDefaultTypeInternal _DeleteRadioProfileRequest_default_instance_;
class DeleteRadioProfileResponse;
class DeleteRadioProfileResponseDefaultTypeInternal;
extern DeleteRadioProfileResponseDefaultTypeInternal _DeleteRadioProfileResponse_default_instance_;
class GetRadioLocationRequest;
class GetRadioLocationRequestDefaultTypeInternal;
extern GetRadioLocationRequestDefaultTypeInternal _GetRadioLocationRequest_default_instance_;
class GetRadioLocationResponse;
class GetRadioLocationResponseDefaultTypeInternal;
extern GetRadioLocationResponseDefaultTypeInternal _GetRadioLocationResponse_default_instance_;
class GetRadioLocationResponse_RadioNotFound;
class GetRadioLocationResponse_RadioNotFoundDefaultTypeInternal;
extern GetRadioLocationResponse_RadioNotFoundDefaultTypeInternal _GetRadioLocationResponse_RadioNotFound_default_instance_;
class SetRadioLocationRequest;
class SetRadioLocationRequestDefaultTypeInternal;
extern SetRadioLocationRequestDefaultTypeInternal _SetRadioLocationRequest_default_instance_;
class SetRadioLocationResponse;
class SetRadioLocationResponseDefaultTypeInternal;
extern SetRadioLocationResponseDefaultTypeInternal _SetRadioLocationResponse_default_instance_;
}  // namespace test
}  // namespace ngcp
namespace google {
namespace protobuf {
template<> ::ngcp::test::CreateRadioProfileRequest* Arena::CreateMaybeMessage<::ngcp::test::CreateRadioProfileRequest>(Arena*);
template<> ::ngcp::test::CreateRadioProfileResponse* Arena::CreateMaybeMessage<::ngcp::test::CreateRadioProfileResponse>(Arena*);
template<> ::ngcp::test::DeleteRadioProfileRequest* Arena::CreateMaybeMessage<::ngcp::test::DeleteRadioProfileRequest>(Arena*);
template<> ::ngcp::test::DeleteRadioProfileResponse* Arena::CreateMaybeMessage<::ngcp::test::DeleteRadioProfileResponse>(Arena*);
template<> ::ngcp::test::GetRadioLocationRequest* Arena::CreateMaybeMessage<::ngcp::test::GetRadioLocationRequest>(Arena*);
template<> ::ngcp::test::GetRadioLocationResponse* Arena::CreateMaybeMessage<::ngcp::test::GetRadioLocationResponse>(Arena*);
template<> ::ngcp::test::GetRadioLocationResponse_RadioNotFound* Arena::CreateMaybeMessage<::ngcp::test::GetRadioLocationResponse_RadioNotFound>(Arena*);
template<> ::ngcp::test::SetRadioLocationRequest* Arena::CreateMaybeMessage<::ngcp::test::SetRadioLocationRequest>(Arena*);
template<> ::ngcp::test::SetRadioLocationResponse* Arena::CreateMaybeMessage<::ngcp::test::SetRadioLocationResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace ngcp {
namespace test {

// ===================================================================

class CreateRadioProfileRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ngcp.test.CreateRadioProfileRequest) */ {
 public:
  CreateRadioProfileRequest();
  virtual ~CreateRadioProfileRequest();

  CreateRadioProfileRequest(const CreateRadioProfileRequest& from);

  inline CreateRadioProfileRequest& operator=(const CreateRadioProfileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateRadioProfileRequest(CreateRadioProfileRequest&& from) noexcept
    : CreateRadioProfileRequest() {
    *this = ::std::move(from);
  }

  inline CreateRadioProfileRequest& operator=(CreateRadioProfileRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateRadioProfileRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateRadioProfileRequest* internal_default_instance() {
    return reinterpret_cast<const CreateRadioProfileRequest*>(
               &_CreateRadioProfileRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CreateRadioProfileRequest* other);
  friend void swap(CreateRadioProfileRequest& a, CreateRadioProfileRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateRadioProfileRequest* New() const final {
    return CreateMaybeMessage<CreateRadioProfileRequest>(NULL);
  }

  CreateRadioProfileRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateRadioProfileRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateRadioProfileRequest& from);
  void MergeFrom(const CreateRadioProfileRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateRadioProfileRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string allowed_locations = 3;
  int allowed_locations_size() const;
  void clear_allowed_locations();
  static const int kAllowedLocationsFieldNumber = 3;
  const ::std::string& allowed_locations(int index) const;
  ::std::string* mutable_allowed_locations(int index);
  void set_allowed_locations(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_allowed_locations(int index, ::std::string&& value);
  #endif
  void set_allowed_locations(int index, const char* value);
  void set_allowed_locations(int index, const char* value, size_t size);
  ::std::string* add_allowed_locations();
  void add_allowed_locations(const ::std::string& value);
  #if LANG_CXX11
  void add_allowed_locations(::std::string&& value);
  #endif
  void add_allowed_locations(const char* value);
  void add_allowed_locations(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& allowed_locations() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_allowed_locations();

  // string alias = 2;
  void clear_alias();
  static const int kAliasFieldNumber = 2;
  const ::std::string& alias() const;
  void set_alias(const ::std::string& value);
  #if LANG_CXX11
  void set_alias(::std::string&& value);
  #endif
  void set_alias(const char* value);
  void set_alias(const char* value, size_t size);
  ::std::string* mutable_alias();
  ::std::string* release_alias();
  void set_allocated_alias(::std::string* alias);

  // uint64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:ngcp.test.CreateRadioProfileRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> allowed_locations_;
  ::google::protobuf::internal::ArenaStringPtr alias_;
  ::google::protobuf::uint64 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_test_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateRadioProfileResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ngcp.test.CreateRadioProfileResponse) */ {
 public:
  CreateRadioProfileResponse();
  virtual ~CreateRadioProfileResponse();

  CreateRadioProfileResponse(const CreateRadioProfileResponse& from);

  inline CreateRadioProfileResponse& operator=(const CreateRadioProfileResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateRadioProfileResponse(CreateRadioProfileResponse&& from) noexcept
    : CreateRadioProfileResponse() {
    *this = ::std::move(from);
  }

  inline CreateRadioProfileResponse& operator=(CreateRadioProfileResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateRadioProfileResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateRadioProfileResponse* internal_default_instance() {
    return reinterpret_cast<const CreateRadioProfileResponse*>(
               &_CreateRadioProfileResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(CreateRadioProfileResponse* other);
  friend void swap(CreateRadioProfileResponse& a, CreateRadioProfileResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateRadioProfileResponse* New() const final {
    return CreateMaybeMessage<CreateRadioProfileResponse>(NULL);
  }

  CreateRadioProfileResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateRadioProfileResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateRadioProfileResponse& from);
  void MergeFrom(const CreateRadioProfileResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateRadioProfileResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ngcp.test.CreateRadioProfileResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_test_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeleteRadioProfileRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ngcp.test.DeleteRadioProfileRequest) */ {
 public:
  DeleteRadioProfileRequest();
  virtual ~DeleteRadioProfileRequest();

  DeleteRadioProfileRequest(const DeleteRadioProfileRequest& from);

  inline DeleteRadioProfileRequest& operator=(const DeleteRadioProfileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteRadioProfileRequest(DeleteRadioProfileRequest&& from) noexcept
    : DeleteRadioProfileRequest() {
    *this = ::std::move(from);
  }

  inline DeleteRadioProfileRequest& operator=(DeleteRadioProfileRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteRadioProfileRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteRadioProfileRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteRadioProfileRequest*>(
               &_DeleteRadioProfileRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(DeleteRadioProfileRequest* other);
  friend void swap(DeleteRadioProfileRequest& a, DeleteRadioProfileRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteRadioProfileRequest* New() const final {
    return CreateMaybeMessage<DeleteRadioProfileRequest>(NULL);
  }

  DeleteRadioProfileRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteRadioProfileRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeleteRadioProfileRequest& from);
  void MergeFrom(const DeleteRadioProfileRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteRadioProfileRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:ngcp.test.DeleteRadioProfileRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_test_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeleteRadioProfileResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ngcp.test.DeleteRadioProfileResponse) */ {
 public:
  DeleteRadioProfileResponse();
  virtual ~DeleteRadioProfileResponse();

  DeleteRadioProfileResponse(const DeleteRadioProfileResponse& from);

  inline DeleteRadioProfileResponse& operator=(const DeleteRadioProfileResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteRadioProfileResponse(DeleteRadioProfileResponse&& from) noexcept
    : DeleteRadioProfileResponse() {
    *this = ::std::move(from);
  }

  inline DeleteRadioProfileResponse& operator=(DeleteRadioProfileResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteRadioProfileResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteRadioProfileResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteRadioProfileResponse*>(
               &_DeleteRadioProfileResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(DeleteRadioProfileResponse* other);
  friend void swap(DeleteRadioProfileResponse& a, DeleteRadioProfileResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteRadioProfileResponse* New() const final {
    return CreateMaybeMessage<DeleteRadioProfileResponse>(NULL);
  }

  DeleteRadioProfileResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteRadioProfileResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeleteRadioProfileResponse& from);
  void MergeFrom(const DeleteRadioProfileResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteRadioProfileResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ngcp.test.DeleteRadioProfileResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_test_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SetRadioLocationRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ngcp.test.SetRadioLocationRequest) */ {
 public:
  SetRadioLocationRequest();
  virtual ~SetRadioLocationRequest();

  SetRadioLocationRequest(const SetRadioLocationRequest& from);

  inline SetRadioLocationRequest& operator=(const SetRadioLocationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetRadioLocationRequest(SetRadioLocationRequest&& from) noexcept
    : SetRadioLocationRequest() {
    *this = ::std::move(from);
  }

  inline SetRadioLocationRequest& operator=(SetRadioLocationRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetRadioLocationRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetRadioLocationRequest* internal_default_instance() {
    return reinterpret_cast<const SetRadioLocationRequest*>(
               &_SetRadioLocationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(SetRadioLocationRequest* other);
  friend void swap(SetRadioLocationRequest& a, SetRadioLocationRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetRadioLocationRequest* New() const final {
    return CreateMaybeMessage<SetRadioLocationRequest>(NULL);
  }

  SetRadioLocationRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SetRadioLocationRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SetRadioLocationRequest& from);
  void MergeFrom(const SetRadioLocationRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetRadioLocationRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string location = 2;
  void clear_location();
  static const int kLocationFieldNumber = 2;
  const ::std::string& location() const;
  void set_location(const ::std::string& value);
  #if LANG_CXX11
  void set_location(::std::string&& value);
  #endif
  void set_location(const char* value);
  void set_location(const char* value, size_t size);
  ::std::string* mutable_location();
  ::std::string* release_location();
  void set_allocated_location(::std::string* location);

  // uint64 radio_id = 1;
  void clear_radio_id();
  static const int kRadioIdFieldNumber = 1;
  ::google::protobuf::uint64 radio_id() const;
  void set_radio_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:ngcp.test.SetRadioLocationRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr location_;
  ::google::protobuf::uint64 radio_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_test_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SetRadioLocationResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ngcp.test.SetRadioLocationResponse) */ {
 public:
  SetRadioLocationResponse();
  virtual ~SetRadioLocationResponse();

  SetRadioLocationResponse(const SetRadioLocationResponse& from);

  inline SetRadioLocationResponse& operator=(const SetRadioLocationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetRadioLocationResponse(SetRadioLocationResponse&& from) noexcept
    : SetRadioLocationResponse() {
    *this = ::std::move(from);
  }

  inline SetRadioLocationResponse& operator=(SetRadioLocationResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetRadioLocationResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetRadioLocationResponse* internal_default_instance() {
    return reinterpret_cast<const SetRadioLocationResponse*>(
               &_SetRadioLocationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(SetRadioLocationResponse* other);
  friend void swap(SetRadioLocationResponse& a, SetRadioLocationResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetRadioLocationResponse* New() const final {
    return CreateMaybeMessage<SetRadioLocationResponse>(NULL);
  }

  SetRadioLocationResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SetRadioLocationResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SetRadioLocationResponse& from);
  void MergeFrom(const SetRadioLocationResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetRadioLocationResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool success = 1;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:ngcp.test.SetRadioLocationResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool success_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_test_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetRadioLocationRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ngcp.test.GetRadioLocationRequest) */ {
 public:
  GetRadioLocationRequest();
  virtual ~GetRadioLocationRequest();

  GetRadioLocationRequest(const GetRadioLocationRequest& from);

  inline GetRadioLocationRequest& operator=(const GetRadioLocationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetRadioLocationRequest(GetRadioLocationRequest&& from) noexcept
    : GetRadioLocationRequest() {
    *this = ::std::move(from);
  }

  inline GetRadioLocationRequest& operator=(GetRadioLocationRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetRadioLocationRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetRadioLocationRequest* internal_default_instance() {
    return reinterpret_cast<const GetRadioLocationRequest*>(
               &_GetRadioLocationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(GetRadioLocationRequest* other);
  friend void swap(GetRadioLocationRequest& a, GetRadioLocationRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetRadioLocationRequest* New() const final {
    return CreateMaybeMessage<GetRadioLocationRequest>(NULL);
  }

  GetRadioLocationRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetRadioLocationRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetRadioLocationRequest& from);
  void MergeFrom(const GetRadioLocationRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRadioLocationRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 radio_id = 2;
  void clear_radio_id();
  static const int kRadioIdFieldNumber = 2;
  ::google::protobuf::uint64 radio_id() const;
  void set_radio_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:ngcp.test.GetRadioLocationRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 radio_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_test_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetRadioLocationResponse_RadioNotFound : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ngcp.test.GetRadioLocationResponse.RadioNotFound) */ {
 public:
  GetRadioLocationResponse_RadioNotFound();
  virtual ~GetRadioLocationResponse_RadioNotFound();

  GetRadioLocationResponse_RadioNotFound(const GetRadioLocationResponse_RadioNotFound& from);

  inline GetRadioLocationResponse_RadioNotFound& operator=(const GetRadioLocationResponse_RadioNotFound& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetRadioLocationResponse_RadioNotFound(GetRadioLocationResponse_RadioNotFound&& from) noexcept
    : GetRadioLocationResponse_RadioNotFound() {
    *this = ::std::move(from);
  }

  inline GetRadioLocationResponse_RadioNotFound& operator=(GetRadioLocationResponse_RadioNotFound&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetRadioLocationResponse_RadioNotFound& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetRadioLocationResponse_RadioNotFound* internal_default_instance() {
    return reinterpret_cast<const GetRadioLocationResponse_RadioNotFound*>(
               &_GetRadioLocationResponse_RadioNotFound_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(GetRadioLocationResponse_RadioNotFound* other);
  friend void swap(GetRadioLocationResponse_RadioNotFound& a, GetRadioLocationResponse_RadioNotFound& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetRadioLocationResponse_RadioNotFound* New() const final {
    return CreateMaybeMessage<GetRadioLocationResponse_RadioNotFound>(NULL);
  }

  GetRadioLocationResponse_RadioNotFound* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetRadioLocationResponse_RadioNotFound>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetRadioLocationResponse_RadioNotFound& from);
  void MergeFrom(const GetRadioLocationResponse_RadioNotFound& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRadioLocationResponse_RadioNotFound* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ngcp.test.GetRadioLocationResponse.RadioNotFound)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_test_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetRadioLocationResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ngcp.test.GetRadioLocationResponse) */ {
 public:
  GetRadioLocationResponse();
  virtual ~GetRadioLocationResponse();

  GetRadioLocationResponse(const GetRadioLocationResponse& from);

  inline GetRadioLocationResponse& operator=(const GetRadioLocationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetRadioLocationResponse(GetRadioLocationResponse&& from) noexcept
    : GetRadioLocationResponse() {
    *this = ::std::move(from);
  }

  inline GetRadioLocationResponse& operator=(GetRadioLocationResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetRadioLocationResponse& default_instance();

  enum ResultCase {
    kLocation = 1,
    kRadioNotFound = 2,
    RESULT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetRadioLocationResponse* internal_default_instance() {
    return reinterpret_cast<const GetRadioLocationResponse*>(
               &_GetRadioLocationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(GetRadioLocationResponse* other);
  friend void swap(GetRadioLocationResponse& a, GetRadioLocationResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetRadioLocationResponse* New() const final {
    return CreateMaybeMessage<GetRadioLocationResponse>(NULL);
  }

  GetRadioLocationResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetRadioLocationResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetRadioLocationResponse& from);
  void MergeFrom(const GetRadioLocationResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRadioLocationResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GetRadioLocationResponse_RadioNotFound RadioNotFound;

  // accessors -------------------------------------------------------

  // string location = 1;
  private:
  bool has_location() const;
  public:
  void clear_location();
  static const int kLocationFieldNumber = 1;
  const ::std::string& location() const;
  void set_location(const ::std::string& value);
  #if LANG_CXX11
  void set_location(::std::string&& value);
  #endif
  void set_location(const char* value);
  void set_location(const char* value, size_t size);
  ::std::string* mutable_location();
  ::std::string* release_location();
  void set_allocated_location(::std::string* location);

  // .ngcp.test.GetRadioLocationResponse.RadioNotFound radio_not_found = 2;
  bool has_radio_not_found() const;
  void clear_radio_not_found();
  static const int kRadioNotFoundFieldNumber = 2;
  private:
  const ::ngcp::test::GetRadioLocationResponse_RadioNotFound& _internal_radio_not_found() const;
  public:
  const ::ngcp::test::GetRadioLocationResponse_RadioNotFound& radio_not_found() const;
  ::ngcp::test::GetRadioLocationResponse_RadioNotFound* release_radio_not_found();
  ::ngcp::test::GetRadioLocationResponse_RadioNotFound* mutable_radio_not_found();
  void set_allocated_radio_not_found(::ngcp::test::GetRadioLocationResponse_RadioNotFound* radio_not_found);

  void clear_result();
  ResultCase result_case() const;
  // @@protoc_insertion_point(class_scope:ngcp.test.GetRadioLocationResponse)
 private:
  void set_has_location();
  void set_has_radio_not_found();

  inline bool has_result() const;
  inline void clear_has_result();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union ResultUnion {
    ResultUnion() {}
    ::google::protobuf::internal::ArenaStringPtr location_;
    ::ngcp::test::GetRadioLocationResponse_RadioNotFound* radio_not_found_;
  } result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_test_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CreateRadioProfileRequest

// uint64 id = 1;
inline void CreateRadioProfileRequest::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 CreateRadioProfileRequest::id() const {
  // @@protoc_insertion_point(field_get:ngcp.test.CreateRadioProfileRequest.id)
  return id_;
}
inline void CreateRadioProfileRequest::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:ngcp.test.CreateRadioProfileRequest.id)
}

// string alias = 2;
inline void CreateRadioProfileRequest::clear_alias() {
  alias_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateRadioProfileRequest::alias() const {
  // @@protoc_insertion_point(field_get:ngcp.test.CreateRadioProfileRequest.alias)
  return alias_.GetNoArena();
}
inline void CreateRadioProfileRequest::set_alias(const ::std::string& value) {
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ngcp.test.CreateRadioProfileRequest.alias)
}
#if LANG_CXX11
inline void CreateRadioProfileRequest::set_alias(::std::string&& value) {
  
  alias_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ngcp.test.CreateRadioProfileRequest.alias)
}
#endif
inline void CreateRadioProfileRequest::set_alias(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ngcp.test.CreateRadioProfileRequest.alias)
}
inline void CreateRadioProfileRequest::set_alias(const char* value, size_t size) {
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ngcp.test.CreateRadioProfileRequest.alias)
}
inline ::std::string* CreateRadioProfileRequest::mutable_alias() {
  
  // @@protoc_insertion_point(field_mutable:ngcp.test.CreateRadioProfileRequest.alias)
  return alias_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateRadioProfileRequest::release_alias() {
  // @@protoc_insertion_point(field_release:ngcp.test.CreateRadioProfileRequest.alias)
  
  return alias_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateRadioProfileRequest::set_allocated_alias(::std::string* alias) {
  if (alias != NULL) {
    
  } else {
    
  }
  alias_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alias);
  // @@protoc_insertion_point(field_set_allocated:ngcp.test.CreateRadioProfileRequest.alias)
}

// repeated string allowed_locations = 3;
inline int CreateRadioProfileRequest::allowed_locations_size() const {
  return allowed_locations_.size();
}
inline void CreateRadioProfileRequest::clear_allowed_locations() {
  allowed_locations_.Clear();
}
inline const ::std::string& CreateRadioProfileRequest::allowed_locations(int index) const {
  // @@protoc_insertion_point(field_get:ngcp.test.CreateRadioProfileRequest.allowed_locations)
  return allowed_locations_.Get(index);
}
inline ::std::string* CreateRadioProfileRequest::mutable_allowed_locations(int index) {
  // @@protoc_insertion_point(field_mutable:ngcp.test.CreateRadioProfileRequest.allowed_locations)
  return allowed_locations_.Mutable(index);
}
inline void CreateRadioProfileRequest::set_allowed_locations(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ngcp.test.CreateRadioProfileRequest.allowed_locations)
  allowed_locations_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void CreateRadioProfileRequest::set_allowed_locations(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ngcp.test.CreateRadioProfileRequest.allowed_locations)
  allowed_locations_.Mutable(index)->assign(std::move(value));
}
#endif
inline void CreateRadioProfileRequest::set_allowed_locations(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  allowed_locations_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ngcp.test.CreateRadioProfileRequest.allowed_locations)
}
inline void CreateRadioProfileRequest::set_allowed_locations(int index, const char* value, size_t size) {
  allowed_locations_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ngcp.test.CreateRadioProfileRequest.allowed_locations)
}
inline ::std::string* CreateRadioProfileRequest::add_allowed_locations() {
  // @@protoc_insertion_point(field_add_mutable:ngcp.test.CreateRadioProfileRequest.allowed_locations)
  return allowed_locations_.Add();
}
inline void CreateRadioProfileRequest::add_allowed_locations(const ::std::string& value) {
  allowed_locations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ngcp.test.CreateRadioProfileRequest.allowed_locations)
}
#if LANG_CXX11
inline void CreateRadioProfileRequest::add_allowed_locations(::std::string&& value) {
  allowed_locations_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ngcp.test.CreateRadioProfileRequest.allowed_locations)
}
#endif
inline void CreateRadioProfileRequest::add_allowed_locations(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  allowed_locations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ngcp.test.CreateRadioProfileRequest.allowed_locations)
}
inline void CreateRadioProfileRequest::add_allowed_locations(const char* value, size_t size) {
  allowed_locations_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ngcp.test.CreateRadioProfileRequest.allowed_locations)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CreateRadioProfileRequest::allowed_locations() const {
  // @@protoc_insertion_point(field_list:ngcp.test.CreateRadioProfileRequest.allowed_locations)
  return allowed_locations_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CreateRadioProfileRequest::mutable_allowed_locations() {
  // @@protoc_insertion_point(field_mutable_list:ngcp.test.CreateRadioProfileRequest.allowed_locations)
  return &allowed_locations_;
}

// -------------------------------------------------------------------

// CreateRadioProfileResponse

// -------------------------------------------------------------------

// DeleteRadioProfileRequest

// uint64 id = 1;
inline void DeleteRadioProfileRequest::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 DeleteRadioProfileRequest::id() const {
  // @@protoc_insertion_point(field_get:ngcp.test.DeleteRadioProfileRequest.id)
  return id_;
}
inline void DeleteRadioProfileRequest::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:ngcp.test.DeleteRadioProfileRequest.id)
}

// -------------------------------------------------------------------

// DeleteRadioProfileResponse

// -------------------------------------------------------------------

// SetRadioLocationRequest

// uint64 radio_id = 1;
inline void SetRadioLocationRequest::clear_radio_id() {
  radio_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SetRadioLocationRequest::radio_id() const {
  // @@protoc_insertion_point(field_get:ngcp.test.SetRadioLocationRequest.radio_id)
  return radio_id_;
}
inline void SetRadioLocationRequest::set_radio_id(::google::protobuf::uint64 value) {
  
  radio_id_ = value;
  // @@protoc_insertion_point(field_set:ngcp.test.SetRadioLocationRequest.radio_id)
}

// string location = 2;
inline void SetRadioLocationRequest::clear_location() {
  location_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetRadioLocationRequest::location() const {
  // @@protoc_insertion_point(field_get:ngcp.test.SetRadioLocationRequest.location)
  return location_.GetNoArena();
}
inline void SetRadioLocationRequest::set_location(const ::std::string& value) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ngcp.test.SetRadioLocationRequest.location)
}
#if LANG_CXX11
inline void SetRadioLocationRequest::set_location(::std::string&& value) {
  
  location_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ngcp.test.SetRadioLocationRequest.location)
}
#endif
inline void SetRadioLocationRequest::set_location(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ngcp.test.SetRadioLocationRequest.location)
}
inline void SetRadioLocationRequest::set_location(const char* value, size_t size) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ngcp.test.SetRadioLocationRequest.location)
}
inline ::std::string* SetRadioLocationRequest::mutable_location() {
  
  // @@protoc_insertion_point(field_mutable:ngcp.test.SetRadioLocationRequest.location)
  return location_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetRadioLocationRequest::release_location() {
  // @@protoc_insertion_point(field_release:ngcp.test.SetRadioLocationRequest.location)
  
  return location_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetRadioLocationRequest::set_allocated_location(::std::string* location) {
  if (location != NULL) {
    
  } else {
    
  }
  location_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), location);
  // @@protoc_insertion_point(field_set_allocated:ngcp.test.SetRadioLocationRequest.location)
}

// -------------------------------------------------------------------

// SetRadioLocationResponse

// bool success = 1;
inline void SetRadioLocationResponse::clear_success() {
  success_ = false;
}
inline bool SetRadioLocationResponse::success() const {
  // @@protoc_insertion_point(field_get:ngcp.test.SetRadioLocationResponse.success)
  return success_;
}
inline void SetRadioLocationResponse::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:ngcp.test.SetRadioLocationResponse.success)
}

// -------------------------------------------------------------------

// GetRadioLocationRequest

// uint64 radio_id = 2;
inline void GetRadioLocationRequest::clear_radio_id() {
  radio_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 GetRadioLocationRequest::radio_id() const {
  // @@protoc_insertion_point(field_get:ngcp.test.GetRadioLocationRequest.radio_id)
  return radio_id_;
}
inline void GetRadioLocationRequest::set_radio_id(::google::protobuf::uint64 value) {
  
  radio_id_ = value;
  // @@protoc_insertion_point(field_set:ngcp.test.GetRadioLocationRequest.radio_id)
}

// -------------------------------------------------------------------

// GetRadioLocationResponse_RadioNotFound

// -------------------------------------------------------------------

// GetRadioLocationResponse

// string location = 1;
inline bool GetRadioLocationResponse::has_location() const {
  return result_case() == kLocation;
}
inline void GetRadioLocationResponse::set_has_location() {
  _oneof_case_[0] = kLocation;
}
inline void GetRadioLocationResponse::clear_location() {
  if (has_location()) {
    result_.location_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_result();
  }
}
inline const ::std::string& GetRadioLocationResponse::location() const {
  // @@protoc_insertion_point(field_get:ngcp.test.GetRadioLocationResponse.location)
  if (has_location()) {
    return result_.location_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void GetRadioLocationResponse::set_location(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ngcp.test.GetRadioLocationResponse.location)
  if (!has_location()) {
    clear_result();
    set_has_location();
    result_.location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  result_.location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ngcp.test.GetRadioLocationResponse.location)
}
#if LANG_CXX11
inline void GetRadioLocationResponse::set_location(::std::string&& value) {
  // @@protoc_insertion_point(field_set:ngcp.test.GetRadioLocationResponse.location)
  if (!has_location()) {
    clear_result();
    set_has_location();
    result_.location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  result_.location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ngcp.test.GetRadioLocationResponse.location)
}
#endif
inline void GetRadioLocationResponse::set_location(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_location()) {
    clear_result();
    set_has_location();
    result_.location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  result_.location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ngcp.test.GetRadioLocationResponse.location)
}
inline void GetRadioLocationResponse::set_location(const char* value, size_t size) {
  if (!has_location()) {
    clear_result();
    set_has_location();
    result_.location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  result_.location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ngcp.test.GetRadioLocationResponse.location)
}
inline ::std::string* GetRadioLocationResponse::mutable_location() {
  if (!has_location()) {
    clear_result();
    set_has_location();
    result_.location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:ngcp.test.GetRadioLocationResponse.location)
  return result_.location_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetRadioLocationResponse::release_location() {
  // @@protoc_insertion_point(field_release:ngcp.test.GetRadioLocationResponse.location)
  if (has_location()) {
    clear_has_result();
    return result_.location_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void GetRadioLocationResponse::set_allocated_location(::std::string* location) {
  if (!has_location()) {
    result_.location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_result();
  if (location != NULL) {
    set_has_location();
    result_.location_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), location);
  }
  // @@protoc_insertion_point(field_set_allocated:ngcp.test.GetRadioLocationResponse.location)
}

// .ngcp.test.GetRadioLocationResponse.RadioNotFound radio_not_found = 2;
inline bool GetRadioLocationResponse::has_radio_not_found() const {
  return result_case() == kRadioNotFound;
}
inline void GetRadioLocationResponse::set_has_radio_not_found() {
  _oneof_case_[0] = kRadioNotFound;
}
inline void GetRadioLocationResponse::clear_radio_not_found() {
  if (has_radio_not_found()) {
    delete result_.radio_not_found_;
    clear_has_result();
  }
}
inline const ::ngcp::test::GetRadioLocationResponse_RadioNotFound& GetRadioLocationResponse::_internal_radio_not_found() const {
  return *result_.radio_not_found_;
}
inline ::ngcp::test::GetRadioLocationResponse_RadioNotFound* GetRadioLocationResponse::release_radio_not_found() {
  // @@protoc_insertion_point(field_release:ngcp.test.GetRadioLocationResponse.radio_not_found)
  if (has_radio_not_found()) {
    clear_has_result();
      ::ngcp::test::GetRadioLocationResponse_RadioNotFound* temp = result_.radio_not_found_;
    result_.radio_not_found_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ngcp::test::GetRadioLocationResponse_RadioNotFound& GetRadioLocationResponse::radio_not_found() const {
  // @@protoc_insertion_point(field_get:ngcp.test.GetRadioLocationResponse.radio_not_found)
  return has_radio_not_found()
      ? *result_.radio_not_found_
      : *reinterpret_cast< ::ngcp::test::GetRadioLocationResponse_RadioNotFound*>(&::ngcp::test::_GetRadioLocationResponse_RadioNotFound_default_instance_);
}
inline ::ngcp::test::GetRadioLocationResponse_RadioNotFound* GetRadioLocationResponse::mutable_radio_not_found() {
  if (!has_radio_not_found()) {
    clear_result();
    set_has_radio_not_found();
    result_.radio_not_found_ = CreateMaybeMessage< ::ngcp::test::GetRadioLocationResponse_RadioNotFound >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ngcp.test.GetRadioLocationResponse.radio_not_found)
  return result_.radio_not_found_;
}

inline bool GetRadioLocationResponse::has_result() const {
  return result_case() != RESULT_NOT_SET;
}
inline void GetRadioLocationResponse::clear_has_result() {
  _oneof_case_[0] = RESULT_NOT_SET;
}
inline GetRadioLocationResponse::ResultCase GetRadioLocationResponse::result_case() const {
  return GetRadioLocationResponse::ResultCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace test
}  // namespace ngcp

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_test_2eproto
