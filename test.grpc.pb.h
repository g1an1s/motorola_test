// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: test.proto
#ifndef GRPC_test_2eproto__INCLUDED
#define GRPC_test_2eproto__INCLUDED

#include "test.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace ngcp {
namespace test {

// NOTE: The service block is for documentation only, it is not meant to generate gRPC code.
class MobilityService final {
 public:
  static constexpr char const* service_full_name() {
    return "ngcp.test.MobilityService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status CreateRadioProfile(::grpc::ClientContext* context, const ::ngcp::test::CreateRadioProfileRequest& request, ::ngcp::test::CreateRadioProfileResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ngcp::test::CreateRadioProfileResponse>> AsyncCreateRadioProfile(::grpc::ClientContext* context, const ::ngcp::test::CreateRadioProfileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ngcp::test::CreateRadioProfileResponse>>(AsyncCreateRadioProfileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ngcp::test::CreateRadioProfileResponse>> PrepareAsyncCreateRadioProfile(::grpc::ClientContext* context, const ::ngcp::test::CreateRadioProfileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ngcp::test::CreateRadioProfileResponse>>(PrepareAsyncCreateRadioProfileRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteRadioProfile(::grpc::ClientContext* context, const ::ngcp::test::DeleteRadioProfileRequest& request, ::ngcp::test::DeleteRadioProfileResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ngcp::test::DeleteRadioProfileResponse>> AsyncDeleteRadioProfile(::grpc::ClientContext* context, const ::ngcp::test::DeleteRadioProfileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ngcp::test::DeleteRadioProfileResponse>>(AsyncDeleteRadioProfileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ngcp::test::DeleteRadioProfileResponse>> PrepareAsyncDeleteRadioProfile(::grpc::ClientContext* context, const ::ngcp::test::DeleteRadioProfileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ngcp::test::DeleteRadioProfileResponse>>(PrepareAsyncDeleteRadioProfileRaw(context, request, cq));
    }
    virtual ::grpc::Status SetRadioLocation(::grpc::ClientContext* context, const ::ngcp::test::SetRadioLocationRequest& request, ::ngcp::test::SetRadioLocationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ngcp::test::SetRadioLocationResponse>> AsyncSetRadioLocation(::grpc::ClientContext* context, const ::ngcp::test::SetRadioLocationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ngcp::test::SetRadioLocationResponse>>(AsyncSetRadioLocationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ngcp::test::SetRadioLocationResponse>> PrepareAsyncSetRadioLocation(::grpc::ClientContext* context, const ::ngcp::test::SetRadioLocationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ngcp::test::SetRadioLocationResponse>>(PrepareAsyncSetRadioLocationRaw(context, request, cq));
    }
    virtual ::grpc::Status GetRadioLocation(::grpc::ClientContext* context, const ::ngcp::test::GetRadioLocationRequest& request, ::ngcp::test::GetRadioLocationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ngcp::test::GetRadioLocationResponse>> AsyncGetRadioLocation(::grpc::ClientContext* context, const ::ngcp::test::GetRadioLocationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ngcp::test::GetRadioLocationResponse>>(AsyncGetRadioLocationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ngcp::test::GetRadioLocationResponse>> PrepareAsyncGetRadioLocation(::grpc::ClientContext* context, const ::ngcp::test::GetRadioLocationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ngcp::test::GetRadioLocationResponse>>(PrepareAsyncGetRadioLocationRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void CreateRadioProfile(::grpc::ClientContext* context, const ::ngcp::test::CreateRadioProfileRequest* request, ::ngcp::test::CreateRadioProfileResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteRadioProfile(::grpc::ClientContext* context, const ::ngcp::test::DeleteRadioProfileRequest* request, ::ngcp::test::DeleteRadioProfileResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetRadioLocation(::grpc::ClientContext* context, const ::ngcp::test::SetRadioLocationRequest* request, ::ngcp::test::SetRadioLocationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetRadioLocation(::grpc::ClientContext* context, const ::ngcp::test::GetRadioLocationRequest* request, ::ngcp::test::GetRadioLocationResponse* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ngcp::test::CreateRadioProfileResponse>* AsyncCreateRadioProfileRaw(::grpc::ClientContext* context, const ::ngcp::test::CreateRadioProfileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ngcp::test::CreateRadioProfileResponse>* PrepareAsyncCreateRadioProfileRaw(::grpc::ClientContext* context, const ::ngcp::test::CreateRadioProfileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ngcp::test::DeleteRadioProfileResponse>* AsyncDeleteRadioProfileRaw(::grpc::ClientContext* context, const ::ngcp::test::DeleteRadioProfileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ngcp::test::DeleteRadioProfileResponse>* PrepareAsyncDeleteRadioProfileRaw(::grpc::ClientContext* context, const ::ngcp::test::DeleteRadioProfileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ngcp::test::SetRadioLocationResponse>* AsyncSetRadioLocationRaw(::grpc::ClientContext* context, const ::ngcp::test::SetRadioLocationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ngcp::test::SetRadioLocationResponse>* PrepareAsyncSetRadioLocationRaw(::grpc::ClientContext* context, const ::ngcp::test::SetRadioLocationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ngcp::test::GetRadioLocationResponse>* AsyncGetRadioLocationRaw(::grpc::ClientContext* context, const ::ngcp::test::GetRadioLocationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ngcp::test::GetRadioLocationResponse>* PrepareAsyncGetRadioLocationRaw(::grpc::ClientContext* context, const ::ngcp::test::GetRadioLocationRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status CreateRadioProfile(::grpc::ClientContext* context, const ::ngcp::test::CreateRadioProfileRequest& request, ::ngcp::test::CreateRadioProfileResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ngcp::test::CreateRadioProfileResponse>> AsyncCreateRadioProfile(::grpc::ClientContext* context, const ::ngcp::test::CreateRadioProfileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ngcp::test::CreateRadioProfileResponse>>(AsyncCreateRadioProfileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ngcp::test::CreateRadioProfileResponse>> PrepareAsyncCreateRadioProfile(::grpc::ClientContext* context, const ::ngcp::test::CreateRadioProfileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ngcp::test::CreateRadioProfileResponse>>(PrepareAsyncCreateRadioProfileRaw(context, request, cq));
    }
    ::grpc::Status DeleteRadioProfile(::grpc::ClientContext* context, const ::ngcp::test::DeleteRadioProfileRequest& request, ::ngcp::test::DeleteRadioProfileResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ngcp::test::DeleteRadioProfileResponse>> AsyncDeleteRadioProfile(::grpc::ClientContext* context, const ::ngcp::test::DeleteRadioProfileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ngcp::test::DeleteRadioProfileResponse>>(AsyncDeleteRadioProfileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ngcp::test::DeleteRadioProfileResponse>> PrepareAsyncDeleteRadioProfile(::grpc::ClientContext* context, const ::ngcp::test::DeleteRadioProfileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ngcp::test::DeleteRadioProfileResponse>>(PrepareAsyncDeleteRadioProfileRaw(context, request, cq));
    }
    ::grpc::Status SetRadioLocation(::grpc::ClientContext* context, const ::ngcp::test::SetRadioLocationRequest& request, ::ngcp::test::SetRadioLocationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ngcp::test::SetRadioLocationResponse>> AsyncSetRadioLocation(::grpc::ClientContext* context, const ::ngcp::test::SetRadioLocationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ngcp::test::SetRadioLocationResponse>>(AsyncSetRadioLocationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ngcp::test::SetRadioLocationResponse>> PrepareAsyncSetRadioLocation(::grpc::ClientContext* context, const ::ngcp::test::SetRadioLocationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ngcp::test::SetRadioLocationResponse>>(PrepareAsyncSetRadioLocationRaw(context, request, cq));
    }
    ::grpc::Status GetRadioLocation(::grpc::ClientContext* context, const ::ngcp::test::GetRadioLocationRequest& request, ::ngcp::test::GetRadioLocationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ngcp::test::GetRadioLocationResponse>> AsyncGetRadioLocation(::grpc::ClientContext* context, const ::ngcp::test::GetRadioLocationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ngcp::test::GetRadioLocationResponse>>(AsyncGetRadioLocationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ngcp::test::GetRadioLocationResponse>> PrepareAsyncGetRadioLocation(::grpc::ClientContext* context, const ::ngcp::test::GetRadioLocationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ngcp::test::GetRadioLocationResponse>>(PrepareAsyncGetRadioLocationRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void CreateRadioProfile(::grpc::ClientContext* context, const ::ngcp::test::CreateRadioProfileRequest* request, ::ngcp::test::CreateRadioProfileResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteRadioProfile(::grpc::ClientContext* context, const ::ngcp::test::DeleteRadioProfileRequest* request, ::ngcp::test::DeleteRadioProfileResponse* response, std::function<void(::grpc::Status)>) override;
      void SetRadioLocation(::grpc::ClientContext* context, const ::ngcp::test::SetRadioLocationRequest* request, ::ngcp::test::SetRadioLocationResponse* response, std::function<void(::grpc::Status)>) override;
      void GetRadioLocation(::grpc::ClientContext* context, const ::ngcp::test::GetRadioLocationRequest* request, ::ngcp::test::GetRadioLocationResponse* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::ngcp::test::CreateRadioProfileResponse>* AsyncCreateRadioProfileRaw(::grpc::ClientContext* context, const ::ngcp::test::CreateRadioProfileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ngcp::test::CreateRadioProfileResponse>* PrepareAsyncCreateRadioProfileRaw(::grpc::ClientContext* context, const ::ngcp::test::CreateRadioProfileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ngcp::test::DeleteRadioProfileResponse>* AsyncDeleteRadioProfileRaw(::grpc::ClientContext* context, const ::ngcp::test::DeleteRadioProfileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ngcp::test::DeleteRadioProfileResponse>* PrepareAsyncDeleteRadioProfileRaw(::grpc::ClientContext* context, const ::ngcp::test::DeleteRadioProfileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ngcp::test::SetRadioLocationResponse>* AsyncSetRadioLocationRaw(::grpc::ClientContext* context, const ::ngcp::test::SetRadioLocationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ngcp::test::SetRadioLocationResponse>* PrepareAsyncSetRadioLocationRaw(::grpc::ClientContext* context, const ::ngcp::test::SetRadioLocationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ngcp::test::GetRadioLocationResponse>* AsyncGetRadioLocationRaw(::grpc::ClientContext* context, const ::ngcp::test::GetRadioLocationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ngcp::test::GetRadioLocationResponse>* PrepareAsyncGetRadioLocationRaw(::grpc::ClientContext* context, const ::ngcp::test::GetRadioLocationRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateRadioProfile_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteRadioProfile_;
    const ::grpc::internal::RpcMethod rpcmethod_SetRadioLocation_;
    const ::grpc::internal::RpcMethod rpcmethod_GetRadioLocation_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status CreateRadioProfile(::grpc::ServerContext* context, const ::ngcp::test::CreateRadioProfileRequest* request, ::ngcp::test::CreateRadioProfileResponse* response);
    virtual ::grpc::Status DeleteRadioProfile(::grpc::ServerContext* context, const ::ngcp::test::DeleteRadioProfileRequest* request, ::ngcp::test::DeleteRadioProfileResponse* response);
    virtual ::grpc::Status SetRadioLocation(::grpc::ServerContext* context, const ::ngcp::test::SetRadioLocationRequest* request, ::ngcp::test::SetRadioLocationResponse* response);
    virtual ::grpc::Status GetRadioLocation(::grpc::ServerContext* context, const ::ngcp::test::GetRadioLocationRequest* request, ::ngcp::test::GetRadioLocationResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateRadioProfile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateRadioProfile() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateRadioProfile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateRadioProfile(::grpc::ServerContext* context, const ::ngcp::test::CreateRadioProfileRequest* request, ::ngcp::test::CreateRadioProfileResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateRadioProfile(::grpc::ServerContext* context, ::ngcp::test::CreateRadioProfileRequest* request, ::grpc::ServerAsyncResponseWriter< ::ngcp::test::CreateRadioProfileResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteRadioProfile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DeleteRadioProfile() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_DeleteRadioProfile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRadioProfile(::grpc::ServerContext* context, const ::ngcp::test::DeleteRadioProfileRequest* request, ::ngcp::test::DeleteRadioProfileResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteRadioProfile(::grpc::ServerContext* context, ::ngcp::test::DeleteRadioProfileRequest* request, ::grpc::ServerAsyncResponseWriter< ::ngcp::test::DeleteRadioProfileResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetRadioLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SetRadioLocation() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_SetRadioLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetRadioLocation(::grpc::ServerContext* context, const ::ngcp::test::SetRadioLocationRequest* request, ::ngcp::test::SetRadioLocationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetRadioLocation(::grpc::ServerContext* context, ::ngcp::test::SetRadioLocationRequest* request, ::grpc::ServerAsyncResponseWriter< ::ngcp::test::SetRadioLocationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetRadioLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetRadioLocation() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetRadioLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRadioLocation(::grpc::ServerContext* context, const ::ngcp::test::GetRadioLocationRequest* request, ::ngcp::test::GetRadioLocationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRadioLocation(::grpc::ServerContext* context, ::ngcp::test::GetRadioLocationRequest* request, ::grpc::ServerAsyncResponseWriter< ::ngcp::test::GetRadioLocationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateRadioProfile<WithAsyncMethod_DeleteRadioProfile<WithAsyncMethod_SetRadioLocation<WithAsyncMethod_GetRadioLocation<Service > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateRadioProfile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_CreateRadioProfile() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::ngcp::test::CreateRadioProfileRequest, ::ngcp::test::CreateRadioProfileResponse>(
          [this](::grpc::ServerContext* context,
                 const ::ngcp::test::CreateRadioProfileRequest* request,
                 ::ngcp::test::CreateRadioProfileResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->CreateRadioProfile(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_CreateRadioProfile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateRadioProfile(::grpc::ServerContext* context, const ::ngcp::test::CreateRadioProfileRequest* request, ::ngcp::test::CreateRadioProfileResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CreateRadioProfile(::grpc::ServerContext* context, const ::ngcp::test::CreateRadioProfileRequest* request, ::ngcp::test::CreateRadioProfileResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteRadioProfile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_DeleteRadioProfile() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::ngcp::test::DeleteRadioProfileRequest, ::ngcp::test::DeleteRadioProfileResponse>(
          [this](::grpc::ServerContext* context,
                 const ::ngcp::test::DeleteRadioProfileRequest* request,
                 ::ngcp::test::DeleteRadioProfileResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->DeleteRadioProfile(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_DeleteRadioProfile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRadioProfile(::grpc::ServerContext* context, const ::ngcp::test::DeleteRadioProfileRequest* request, ::ngcp::test::DeleteRadioProfileResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DeleteRadioProfile(::grpc::ServerContext* context, const ::ngcp::test::DeleteRadioProfileRequest* request, ::ngcp::test::DeleteRadioProfileResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetRadioLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_SetRadioLocation() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::ngcp::test::SetRadioLocationRequest, ::ngcp::test::SetRadioLocationResponse>(
          [this](::grpc::ServerContext* context,
                 const ::ngcp::test::SetRadioLocationRequest* request,
                 ::ngcp::test::SetRadioLocationResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->SetRadioLocation(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_SetRadioLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetRadioLocation(::grpc::ServerContext* context, const ::ngcp::test::SetRadioLocationRequest* request, ::ngcp::test::SetRadioLocationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SetRadioLocation(::grpc::ServerContext* context, const ::ngcp::test::SetRadioLocationRequest* request, ::ngcp::test::SetRadioLocationResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetRadioLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetRadioLocation() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::ngcp::test::GetRadioLocationRequest, ::ngcp::test::GetRadioLocationResponse>(
          [this](::grpc::ServerContext* context,
                 const ::ngcp::test::GetRadioLocationRequest* request,
                 ::ngcp::test::GetRadioLocationResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetRadioLocation(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_GetRadioLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRadioLocation(::grpc::ServerContext* context, const ::ngcp::test::GetRadioLocationRequest* request, ::ngcp::test::GetRadioLocationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetRadioLocation(::grpc::ServerContext* context, const ::ngcp::test::GetRadioLocationRequest* request, ::ngcp::test::GetRadioLocationResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_CreateRadioProfile<ExperimentalWithCallbackMethod_DeleteRadioProfile<ExperimentalWithCallbackMethod_SetRadioLocation<ExperimentalWithCallbackMethod_GetRadioLocation<Service > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreateRadioProfile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateRadioProfile() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateRadioProfile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateRadioProfile(::grpc::ServerContext* context, const ::ngcp::test::CreateRadioProfileRequest* request, ::ngcp::test::CreateRadioProfileResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteRadioProfile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DeleteRadioProfile() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_DeleteRadioProfile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRadioProfile(::grpc::ServerContext* context, const ::ngcp::test::DeleteRadioProfileRequest* request, ::ngcp::test::DeleteRadioProfileResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetRadioLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SetRadioLocation() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_SetRadioLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetRadioLocation(::grpc::ServerContext* context, const ::ngcp::test::SetRadioLocationRequest* request, ::ngcp::test::SetRadioLocationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetRadioLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetRadioLocation() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetRadioLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRadioLocation(::grpc::ServerContext* context, const ::ngcp::test::GetRadioLocationRequest* request, ::ngcp::test::GetRadioLocationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateRadioProfile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_CreateRadioProfile() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateRadioProfile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateRadioProfile(::grpc::ServerContext* context, const ::ngcp::test::CreateRadioProfileRequest* request, ::ngcp::test::CreateRadioProfileResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateRadioProfile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteRadioProfile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_DeleteRadioProfile() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_DeleteRadioProfile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRadioProfile(::grpc::ServerContext* context, const ::ngcp::test::DeleteRadioProfileRequest* request, ::ngcp::test::DeleteRadioProfileResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteRadioProfile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetRadioLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SetRadioLocation() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_SetRadioLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetRadioLocation(::grpc::ServerContext* context, const ::ngcp::test::SetRadioLocationRequest* request, ::ngcp::test::SetRadioLocationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetRadioLocation(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetRadioLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetRadioLocation() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetRadioLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRadioLocation(::grpc::ServerContext* context, const ::ngcp::test::GetRadioLocationRequest* request, ::ngcp::test::GetRadioLocationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRadioLocation(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateRadioProfile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateRadioProfile() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->CreateRadioProfile(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateRadioProfile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateRadioProfile(::grpc::ServerContext* context, const ::ngcp::test::CreateRadioProfileRequest* request, ::ngcp::test::CreateRadioProfileResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CreateRadioProfile(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteRadioProfile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteRadioProfile() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->DeleteRadioProfile(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteRadioProfile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRadioProfile(::grpc::ServerContext* context, const ::ngcp::test::DeleteRadioProfileRequest* request, ::ngcp::test::DeleteRadioProfileResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DeleteRadioProfile(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetRadioLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_SetRadioLocation() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->SetRadioLocation(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_SetRadioLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetRadioLocation(::grpc::ServerContext* context, const ::ngcp::test::SetRadioLocationRequest* request, ::ngcp::test::SetRadioLocationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SetRadioLocation(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetRadioLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetRadioLocation() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetRadioLocation(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetRadioLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRadioLocation(::grpc::ServerContext* context, const ::ngcp::test::GetRadioLocationRequest* request, ::ngcp::test::GetRadioLocationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetRadioLocation(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateRadioProfile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CreateRadioProfile() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::ngcp::test::CreateRadioProfileRequest, ::ngcp::test::CreateRadioProfileResponse>(std::bind(&WithStreamedUnaryMethod_CreateRadioProfile<BaseClass>::StreamedCreateRadioProfile, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateRadioProfile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateRadioProfile(::grpc::ServerContext* context, const ::ngcp::test::CreateRadioProfileRequest* request, ::ngcp::test::CreateRadioProfileResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateRadioProfile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ngcp::test::CreateRadioProfileRequest,::ngcp::test::CreateRadioProfileResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteRadioProfile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DeleteRadioProfile() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::ngcp::test::DeleteRadioProfileRequest, ::ngcp::test::DeleteRadioProfileResponse>(std::bind(&WithStreamedUnaryMethod_DeleteRadioProfile<BaseClass>::StreamedDeleteRadioProfile, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeleteRadioProfile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteRadioProfile(::grpc::ServerContext* context, const ::ngcp::test::DeleteRadioProfileRequest* request, ::ngcp::test::DeleteRadioProfileResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteRadioProfile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ngcp::test::DeleteRadioProfileRequest,::ngcp::test::DeleteRadioProfileResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetRadioLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SetRadioLocation() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::ngcp::test::SetRadioLocationRequest, ::ngcp::test::SetRadioLocationResponse>(std::bind(&WithStreamedUnaryMethod_SetRadioLocation<BaseClass>::StreamedSetRadioLocation, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetRadioLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetRadioLocation(::grpc::ServerContext* context, const ::ngcp::test::SetRadioLocationRequest* request, ::ngcp::test::SetRadioLocationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetRadioLocation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ngcp::test::SetRadioLocationRequest,::ngcp::test::SetRadioLocationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetRadioLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetRadioLocation() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::ngcp::test::GetRadioLocationRequest, ::ngcp::test::GetRadioLocationResponse>(std::bind(&WithStreamedUnaryMethod_GetRadioLocation<BaseClass>::StreamedGetRadioLocation, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetRadioLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetRadioLocation(::grpc::ServerContext* context, const ::ngcp::test::GetRadioLocationRequest* request, ::ngcp::test::GetRadioLocationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetRadioLocation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ngcp::test::GetRadioLocationRequest,::ngcp::test::GetRadioLocationResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateRadioProfile<WithStreamedUnaryMethod_DeleteRadioProfile<WithStreamedUnaryMethod_SetRadioLocation<WithStreamedUnaryMethod_GetRadioLocation<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateRadioProfile<WithStreamedUnaryMethod_DeleteRadioProfile<WithStreamedUnaryMethod_SetRadioLocation<WithStreamedUnaryMethod_GetRadioLocation<Service > > > > StreamedService;
};

}  // namespace test
}  // namespace ngcp


#endif  // GRPC_test_2eproto__INCLUDED
